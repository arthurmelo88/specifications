
[summary]

id:			CR-000106

date_raised:	18/08/2004

raised_by:		Andrew Goodchild (DSTC)

title:		Add support for scientific notation in Quantity package

owner:		ARB

status:		initial


[change information]

change_category:	enhancement

analyst:		Andrew Goodchild, Thomas Beale, Sam Heard

problem_description: At least some pathologists have a requirement for test
		result data to be represented on the screen exactly as it 
		currently appears on the paper reports. This means that if a 
		Hepatitis C RNA result comes out expressed using scientific 
		notation with an exponent of 5, then the result should appear 
		on the screen using scientific notation with an exponent of 5. 
		
		The use of scientific notation is common in pathology, and
		seems to stem from the visual ease of reading results when 
		mantisse - the value - and exponent are separated. E.g. the
		number “8.5 x 10^5” is easier to read than "8,500,000".  

		An important part of the requirement is that the exponent 
		will be the same for all values for a given analyte, for all
		patients; i.e. the value 1,150,000 will be displayed as 
		“11.5x10^5”, even though “1.15x10^6” would be the canonical 
		form.  This approach means a) that all mantissas for a given
		analyte are directly comparable visually, and that b) they can
		completely ignore the exponent part of the number.  

change_description:  A number of options have been considered, as follows:
		1.  In the class DV_QUANTITY, we replace the magnitude attribute 
		    with a pair of attributes: mantissa and exponent.  The problem 
		    with this, as Tom suggested, is the value is not easily 
		    accessible for computation, especially over population queries
		    which include other quantities which are not in scientific
		    form.

		2. We place the exponent in the units as Sam suggested.  E.g. 
		   magnitude = 8.5 and units = “x10^5”.  AG: the problem with this 
		   is the value in the magnitude is not the true value and it may 
		   not be appropriate to use it in some computations and pollutes 
		   your unit space.

		3. We add additional attributes to DV_QUANTITY called 
		   “original_value: Double (optional)” and 
		   “original_units string: Double (optional)“ for capturing the 
		   values to put on the screen.  In this case the magnitude = 
		   8,500,000 and original_value=”8.5” and original_units=”x10^5”. 
		   This solution is also similar to HL7v3 PQ which has an 
		   original_value and original_units attributes.

		   TB: this is a pretty ugly solution, as it invites the chaos of
		   value duplication, and ambiguity about when and if each one has
		   to be filled in - what if some software only put values in the
		   "original_xxx" attributes and ignored the "magnitude" and
		   "units" attributes? Does receiving software have to always read
		   both? What if both are filled in but are in conflict.

		4. We add an additional attribute to DV_QUANTITY called 
		   “original_exponent: Integer (optional)”  for capturing the 
		   original exponent of the data.  In this case we would represent 
		   magnitude=8,500,000 and original_exponent=5.

		   TB: this is not great, but not terrible either; however, it is
		   another attribute which invites abuse, and does break a basic 
		   rule of OO modelling, which is that all attributes of a class
		   should be able to have meaningful values for all possible
		   instances of that class.

		5. We add a new subtype to DV_QUANTITY called DV_SCIENTIFIC_QUANTITY 
		   which has an attribute “exponent: Integer (mandatory)”, and a
		   function “coefficient: Decimal”.  In the example case the 
		   magnitude=8,500,000, the coefficient=8.5 and the exponent=5.  
		   The logic of the coefficient function is:
		   	Result := magnitude / (10 ^ exponent)

		The recommended approach is the final option above, since this
		causes no changes to existing classes, and explicitly models
		scientific quantities in a clear way, which does not impact on
		existing uses of non-scientific quantities.

		The wording relating to DV_QUANTITY must be changed - currently it
		talks about "scientific quantities", but really means "systematic"
		quantities. New text is needed to describe how scientific
		quantities are dealt with.

impact_analysis:		Low impact on models; only changes existing software
		where the new type is needed.

changed_components:	rm.data_types.quantity

approved_by:	

implementor:	<name(s)>


[test and release]

target_release:	1.0

test_release:	1.0

test_status:	<in_test | passed | failed>


[resolution]

date_closed:	

reason_for_rejection:	

notes:		
